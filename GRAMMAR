expression     -> assignment ;
assignment     -> ( call "." )? IDENTIFIER "=" assignment
                | logic_or ;
logic_or       -> logic_and ( "or" logic_and )* ;
logic_and      -> equality ( "and" equality )* ;
equality       -> comparison ( ( "!=" | "==" ) comparison )* ;
comparison     -> term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term           -> factor ( ( "-" | "+" ) factor )* ;
factor         -> unary ( ( "/" | "*" ) unary )* ;
unary          -> ( "!" | "-" ) unary | call ;
call           -> primary ( "(" arguments? ")" | "." IDENTIFIER )* ;
primary        -> NUMBER | STRING | "true" | "false" | "nil"
                | "(" expression ")" 
                | IDENTIFIER ;
arguments      -> expression ( "," expression )* ;

program        -> declaration* EOF ;
declaration    -> classDecl
                | funDecl
                | varDecl
                | statement ;
classDecl      -> "class" IDENTIFIER "{" function* "}" ;
function       -> IDENTIFIER "(" parameters? ")" block ;
parameters     -> IDENTIFIER ( "," IDENTIFIER )* ;
varDecl        -> "var" IDENTIFIER ( "=" expression )? ";" ;
statement      -> exprStmt 
                | forStmt
                | ifStmt
                | printStmt
                | printlnStmt
                | returnStmt
                | whileStmt
                | block ;
exprStmt       -> expression ";" ; 
forStmt        -> "for" "(" ( valDecl | exprStmt | ";" )
                  expression? ";"
                  expression? ")" statement;
ifStmt         -> "if" "(" expression ")" statement ( "else" statement )? ;
printStmt      -> "print" expression ";" ;
printlnStmt    -> "println" expression ";" ;
returnStmt     -> "return" expression? ";" ;
whileStmt      -> "while" "(" expression ")" statement ;
block          -> "{" declaration* "}" ;
